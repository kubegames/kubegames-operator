// code generated by github.com/kubegames/protoc-gen-gin. DO NOT EDIT.

package game

//GameService
//kubegames_game.GameService
//// game api service

import (
	"context"
	"fmt"
	"github.com/gin-gonic/gin"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	types "github.com/kubegames/kubegames-operator/app/game/types"
)

func NewGameServiceError(code int, format string, a ...interface{}) error {
	return status.Error(codes.Code(code), fmt.Sprintf(format, a...))
}

type GameServiceHTTPServer interface {
	Delete(ctx context.Context, request *types.DeleteRequest) (response *types.DeleteResponse, err error)
}

func RegisterGameServiceHTTPServer(r gin.IRouter, srv GameServiceHTTPServer) {
	//init router
	s := _GameService{
		server: srv,
		router: r,
	}
	s._RegisterService()
}

type _GameService struct {
	server GameServiceHTTPServer
	router gin.IRouter
}

func (s *_GameService) Delete_0(ctx *gin.Context) {
	var in types.DeleteRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_GameServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_GameServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(GameServiceHTTPServer).Delete(newCtx, &in)
	if err != nil {
		_GameServiceError(ctx, err)
		return
	}

	_GameServiceSuccess(ctx, out)
}

func (s *_GameService) _RegisterService() {

	s.router.Handle("DELETE", "/api/v1/delete/:gameID", s.Delete_0)

}

func _GameServiceError(ctx *gin.Context, err error) {
	code := 500

	msg := "unknow error"
	if err == nil {
		msg += ", err is nil"
		ctx.JSON(code, map[string]interface{}{
			"code": code,
			"msg":  msg,
			"data": nil,
		})
		return
	}

	if c, ok := status.FromError(err); ok {
		code = int(c.Code())
		msg = c.Message()
	}

	//_ = ctx.Error(err)

	ctx.JSON(code, map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": nil,
	})
}

func _GameServiceParamsError(ctx *gin.Context, err error) {
	ctx.JSON(400, map[string]interface{}{
		"code": 400,
		"msg":  err.Error(),
		"data": nil,
	})
}

func _GameServiceSuccess(ctx *gin.Context, data interface{}) {
	ctx.JSON(200, map[string]interface{}{
		"code": 200,
		"msg":  "success",
		"data": data,
	})
}
