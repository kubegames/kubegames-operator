/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubegames/kubegames-operator/pkg/apis/game/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GameLister helps list Games.
// All objects returned here must be treated as read-only.
type GameLister interface {
	// List lists all Games in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Game, err error)
	// Games returns an object that can list and get Games.
	Games(namespace string) GameNamespaceLister
	GameListerExpansion
}

// gameLister implements the GameLister interface.
type gameLister struct {
	indexer cache.Indexer
}

// NewGameLister returns a new GameLister.
func NewGameLister(indexer cache.Indexer) GameLister {
	return &gameLister{indexer: indexer}
}

// List lists all Games in the indexer.
func (s *gameLister) List(selector labels.Selector) (ret []*v1.Game, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Game))
	})
	return ret, err
}

// Games returns an object that can list and get Games.
func (s *gameLister) Games(namespace string) GameNamespaceLister {
	return gameNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GameNamespaceLister helps list and get Games.
// All objects returned here must be treated as read-only.
type GameNamespaceLister interface {
	// List lists all Games in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Game, err error)
	// Get retrieves the Game from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Game, error)
	GameNamespaceListerExpansion
}

// gameNamespaceLister implements the GameNamespaceLister
// interface.
type gameNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Games in the indexer for a given namespace.
func (s gameNamespaceLister) List(selector labels.Selector) (ret []*v1.Game, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Game))
	})
	return ret, err
}

// Get retrieves the Game from the indexer for a given namespace and name.
func (s gameNamespaceLister) Get(name string) (*v1.Game, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("game"), name)
	}
	return obj.(*v1.Game), nil
}
